<?php

namespace Proxies\__CG__\models;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Group extends \models\Group implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function setKodeGroup($kode_group)
    {
        $this->__load();
        return parent::setKodeGroup($kode_group);
    }

    public function setNamaGroup($nama_group)
    {
        $this->__load();
        return parent::setNamaGroup($nama_group);
    }

    public function setKeterangan($keterangan)
    {
        $this->__load();
        return parent::setKeterangan($keterangan);
    }

    public function setAddDate($add_date)
    {
        $this->__load();
        return parent::setAddDate($add_date);
    }

    public function setModifiedDate($modified_date)
    {
        $this->__load();
        return parent::setModifiedDate($modified_date);
    }

    public function setAddUser($add_user)
    {
        $this->__load();
        return parent::setAddUser($add_user);
    }

    public function setModifiedUser($modified_user)
    {
        $this->__load();
        return parent::setModifiedUser($modified_user);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getKodeGroup()
    {
        $this->__load();
        return parent::getKodeGroup();
    }

    public function getNamaGroup()
    {
        $this->__load();
        return parent::getNamaGroup();
    }

    public function getKeterangan()
    {
        $this->__load();
        return parent::getKeterangan();
    }

    public function getAddDate()
    {
        $this->__load();
        return parent::getAddDate();
    }

    public function getModifiedDate()
    {
        $this->__load();
        return parent::getModifiedDate();
    }

    public function getAddUser()
    {
        $this->__load();
        return parent::getAddUser();
    }

    public function getModifiedUser()
    {
        $this->__load();
        return parent::getModifiedUser();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'kode_group', 'nama_group', 'keterangan', 'add_date', 'modified_date', 'add_user', 'modified_user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}